{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_gaslane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionID",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "_interval",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "enum LotteryState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestID",
          "type": "uint256"
        }
      ],
      "name": "RequestedWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "play",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80a5f7c59e9663f676fa3e7fdc2a0c30d481ad77b3de3944b2807ee1f8eb5e06",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1186167",
    "logsBloom": "0x
    "blockHash": "0xe5b73147b51ba5ed510f6cd10bc59a80d348a9a8a11a6b1df661403b0762f827",
    "transactionHash": "0x80a5f7c59e9663f676fa3e7fdc2a0c30d481ad77b3de3944b2807ee1f8eb5e06",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1186167",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "1",
    500000,
    30
  ],
  "numDeployments": 1,
  "solcInputHash": "86cc162e9b927d255b70c247d841b5e9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_gaslane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionID\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"_interval\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"enum LotteryState\",\"name\":\"state\",\"type\":\"uint8\"}],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"name\":\"RequestedWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nenum LotteryState {\\n    OPEN,\\n    CALCULATING\\n}\\n\\nerror Lottery__NotEnoughETH();\\nerror Lottery__TransferFailed();\\nerror Lottery__NotOpen();\\nerror Lottery__UpkeepNotNeeded(\\n    uint256 currentBalance,\\n    uint256 numPlayers,\\n    LotteryState state\\n);\\n\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    uint256 public immutable playFee;\\n    address payable[] private players;\\n    address payable private lastWinner;\\n    uint16 private immutable interval;\\n    LotteryState private state;\\n\\n    VRFCoordinatorV2Interface private immutable vrfCoordinator;\\n    bytes32 private immutable gaslane;\\n    uint64 private immutable subscriptionID;\\n    uint32 private immutable gasLimit;\\n    uint32 private constant words = 1;\\n    uint16 private constant blockConfirmation = 3;\\n    uint256 private previousTimestamp;\\n\\n    event LotteryEnter(address indexed player);\\n    event RequestedWinner(uint256 indexed requestID);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address _vrfCoordinatorV2,\\n        uint256 _fee,\\n        bytes32 _gaslane,\\n        uint64 _subscriptionID,\\n        uint32 _gasLimit,\\n        uint16 _interval\\n    ) VRFConsumerBaseV2(_vrfCoordinatorV2) {\\n        playFee = _fee;\\n        gaslane = _gaslane;\\n        subscriptionID = _subscriptionID;\\n        gasLimit = _gasLimit;\\n        state = LotteryState.OPEN;\\n        previousTimestamp = block.timestamp;\\n        interval = _interval;\\n        vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinatorV2);\\n    }\\n\\n    modifier checkState() {\\n        if (state != LotteryState.OPEN) {\\n            revert Lottery__NotOpen();\\n        }\\n        _;\\n    }\\n\\n    function getPlayFee() public view returns (uint256) {\\n        return playFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return players[index];\\n    }\\n\\n    function getWinner() public view returns (address) {\\n        return lastWinner;\\n    }\\n\\n    function getLatestTimestamp() public view returns (uint256) {\\n        return previousTimestamp;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return state;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return interval;\\n    }\\n\\n    function play() public payable checkState {\\n        if (msg.value < playFee) {\\n            revert Lottery__NotEnoughETH();\\n        }\\n\\n        players.push(payable(msg.sender));\\n        emit LotteryEnter(msg.sender);\\n    }\\n\\n    function checkUpkeep(bytes memory)\\n        public\\n        override\\n        returns (bool upkeepNeeded, bytes memory)\\n    {\\n        upkeepNeeded =\\n            (LotteryState.OPEN == state) &&\\n            ((block.timestamp - previousTimestamp) > interval) &&\\n            (players.length > 0) &&\\n            (address(this).balance > 0);\\n    }\\n\\n    function performUpkeep(bytes calldata) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Lottery__UpkeepNotNeeded(\\n                address(this).balance,\\n                players.length,\\n                state\\n            );\\n        }\\n        winner();\\n    }\\n\\n    function winner() internal {\\n        state = LotteryState.CALCULATING;\\n        uint256 requestID = vrfCoordinator.requestRandomWords(\\n            gaslane,\\n            subscriptionID,\\n            blockConfirmation,\\n            gasLimit,\\n            words\\n        );\\n\\n        emit RequestedWinner(requestID);\\n    }\\n\\n    function fulfillRandomWords(uint256, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        lastWinner = players[randomWords[0] % players.length];\\n\\n        (bool success, ) = lastWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__TransferFailed();\\n        }\\n\\n        resetPlayer();\\n        previousTimestamp = block.timestamp;\\n        state = LotteryState.OPEN;\\n\\n        emit WinnerPicked(lastWinner);\\n    }\\n\\n    function resetPlayer() internal {\\n        players = new address payable[](0);\\n    }\\n}\\n\",\"keccak256\":\"0x5e57a592049a68159a1e89744235d32bdc400ea194057a56e62aeae60cfbe40d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620017fc380380620017fc8339818101604052810190620000389190620002db565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508361010081815250508267ffffffffffffffff166101208167ffffffffffffffff16815250508163ffffffff166101408163ffffffff16815250506000600160146101000a81548160ff02191690836001811115620000da57620000d962000377565b5b0217905550426002819055508061ffff1660c08161ffff16815250508573ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1681525050505050505050620003a6565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000168826200013b565b9050919050565b6200017a816200015b565b81146200018657600080fd5b50565b6000815190506200019a816200016f565b92915050565b6000819050919050565b620001b581620001a0565b8114620001c157600080fd5b50565b600081519050620001d581620001aa565b92915050565b6000819050919050565b620001f081620001db565b8114620001fc57600080fd5b50565b6000815190506200021081620001e5565b92915050565b600067ffffffffffffffff82169050919050565b620002358162000216565b81146200024157600080fd5b50565b60008151905062000255816200022a565b92915050565b600063ffffffff82169050919050565b62000276816200025b565b81146200028257600080fd5b50565b60008151905062000296816200026b565b92915050565b600061ffff82169050919050565b620002b5816200029c565b8114620002c157600080fd5b50565b600081519050620002d581620002aa565b92915050565b60008060008060008060c08789031215620002fb57620002fa62000136565b5b60006200030b89828a0162000189565b96505060206200031e89828a01620001c4565b95505060406200033189828a01620001ff565b94505060606200034489828a0162000244565b93505060806200035789828a0162000285565b92505060a06200036a89828a01620002c4565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516113df6200041d60003960006109910152600061096e0152600061094d0152600061091101526000818161046501526104e901526000818161027e0152818161036401526105800152600081816102a401526102f801526113df6000f3fe60806040526004361061009c5760003560e01c80636e04ff0d116100645780636e04ff0d146101745780638e7ea5b2146101b257806391ad27b4146101dd57806393e84cd914610208578063e55ae4e814610212578063f43b52cb1461024f5761009c565b80630e80d4da146100a15780631fe543e3146100cc578063283d314a146100f55780634585e33b146101205780636b68c03c14610149575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190610b69565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190610d1d565b6102a2565b005b34801561010157600080fd5b5061010a610362565b6040516101179190610b69565b60405180910390f35b34801561012c57600080fd5b5061014760048036038101906101429190610dd4565b610386565b005b34801561015557600080fd5b5061015e61040a565b60405161016b9190610e98565b60405180910390f35b34801561018057600080fd5b5061019b60048036038101906101969190610f68565b610421565b6040516101a992919061104b565b60405180910390f35b3480156101be57600080fd5b506101c76104bb565b6040516101d491906110bc565b60405180910390f35b3480156101e957600080fd5b506101f26104e5565b6040516101ff9190610b69565b60405180910390f35b610210610511565b005b34801561021e57600080fd5b50610239600480360381019061023491906110d7565b610680565b60405161024691906110bc565b60405180910390f35b34801561025b57600080fd5b506102646106c7565b6040516102719190610b69565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161034b929190611104565b60405180910390fd5b61035e82826106d1565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006103a060405180602001604052806000815250610421565b509050806103fd5747600080549050600160149054906101000a900460ff166040517f8c4c25f10000000000000000000000000000000000000000000000000000000081526004016103f49392919061112d565b60405180910390fd5b6104056108e3565b505050565b6000600160149054906101000a900460ff16905090565b60006060600160149054906101000a900460ff16600181111561044757610446610e21565b5b6000600181111561045b5761045a610e21565b5b14801561049857507f000000000000000000000000000000000000000000000000000000000000000061ffff16600254426104969190611193565b115b80156104a8575060008080549050115b80156104b45750600047115b9150915091565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000061ffff16905090565b6000600181111561052557610524610e21565b5b600160149054906101000a900460ff16600181111561054757610546610e21565b5b1461057e576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003410156105d8576040517f6844f56200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b6000808281548110610695576106946111c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050826000815181106106ec576106eb6111c7565b5b60200260200101516106fe9190611225565b8154811061070f5761070e6111c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516107c290611287565b60006040518083038185875af1925050503d80600081146107ff576040519150601f19603f3d011682016040523d82523d6000602084013e610804565b606091505b505090508061083f576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610847610a47565b426002819055506000600160146101000a81548160ff0219169083600181111561087457610873610e21565b5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2505050565b60018060146101000a81548160ff0219169083600181111561090857610907610e21565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016109d2959493929190611314565b6020604051808303816000875af11580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a15919061137c565b9050807fb67476d1d38e93caac2ca37113122e613c199269c4cea0d39c67807a6442b40a60405160405180910390a250565b600067ffffffffffffffff811115610a6257610a61610bda565b5b604051908082528060200260200182016040528015610a905781602001602082028036833780820191505090505b5060009080519060200190610aa6929190610aa9565b50565b828054828255906000526020600020908101928215610b22579160200282015b82811115610b215782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ac9565b5b509050610b2f9190610b33565b5090565b5b80821115610b4c576000816000905550600101610b34565b5090565b6000819050919050565b610b6381610b50565b82525050565b6000602082019050610b7e6000830184610b5a565b92915050565b6000604051905090565b600080fd5b600080fd5b610ba181610b50565b8114610bac57600080fd5b50565b600081359050610bbe81610b98565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c1282610bc9565b810181811067ffffffffffffffff82111715610c3157610c30610bda565b5b80604052505050565b6000610c44610b84565b9050610c508282610c09565b919050565b600067ffffffffffffffff821115610c7057610c6f610bda565b5b602082029050602081019050919050565b600080fd5b6000610c99610c9484610c55565b610c3a565b90508083825260208201905060208402830185811115610cbc57610cbb610c81565b5b835b81811015610ce55780610cd18882610baf565b845260208401935050602081019050610cbe565b5050509392505050565b600082601f830112610d0457610d03610bc4565b5b8135610d14848260208601610c86565b91505092915050565b60008060408385031215610d3457610d33610b8e565b5b6000610d4285828601610baf565b925050602083013567ffffffffffffffff811115610d6357610d62610b93565b5b610d6f85828601610cef565b9150509250929050565b600080fd5b60008083601f840112610d9457610d93610bc4565b5b8235905067ffffffffffffffff811115610db157610db0610d79565b5b602083019150836001820283011115610dcd57610dcc610c81565b5b9250929050565b60008060208385031215610deb57610dea610b8e565b5b600083013567ffffffffffffffff811115610e0957610e08610b93565b5b610e1585828601610d7e565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e6157610e60610e21565b5b50565b6000819050610e7282610e50565b919050565b6000610e8282610e64565b9050919050565b610e9281610e77565b82525050565b6000602082019050610ead6000830184610e89565b92915050565b600080fd5b600067ffffffffffffffff821115610ed357610ed2610bda565b5b610edc82610bc9565b9050602081019050919050565b82818337600083830152505050565b6000610f0b610f0684610eb8565b610c3a565b905082815260208101848484011115610f2757610f26610eb3565b5b610f32848285610ee9565b509392505050565b600082601f830112610f4f57610f4e610bc4565b5b8135610f5f848260208601610ef8565b91505092915050565b600060208284031215610f7e57610f7d610b8e565b5b600082013567ffffffffffffffff811115610f9c57610f9b610b93565b5b610fa884828501610f3a565b91505092915050565b60008115159050919050565b610fc681610fb1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611006578082015181840152602081019050610feb565b60008484015250505050565b600061101d82610fcc565b6110278185610fd7565b9350611037818560208601610fe8565b61104081610bc9565b840191505092915050565b60006040820190506110606000830185610fbd565b81810360208301526110728184611012565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110a68261107b565b9050919050565b6110b68161109b565b82525050565b60006020820190506110d160008301846110ad565b92915050565b6000602082840312156110ed576110ec610b8e565b5b60006110fb84828501610baf565b91505092915050565b600060408201905061111960008301856110ad565b61112660208301846110ad565b9392505050565b60006060820190506111426000830186610b5a565b61114f6020830185610b5a565b61115c6040830184610e89565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061119e82610b50565b91506111a983610b50565b92508282039050818111156111c1576111c0611164565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061123082610b50565b915061123b83610b50565b92508261124b5761124a6111f6565b5b828206905092915050565b600081905092915050565b50565b6000611271600083611256565b915061127c82611261565b600082019050919050565b600061129282611264565b9150819050919050565b6000819050919050565b6112af8161129c565b82525050565b600067ffffffffffffffff82169050919050565b6112d2816112b5565b82525050565b600061ffff82169050919050565b6112ef816112d8565b82525050565b600063ffffffff82169050919050565b61130e816112f5565b82525050565b600060a08201905061132960008301886112a6565b61133660208301876112c9565b61134360408301866112e6565b6113506060830185611305565b61135d6080830184611305565b9695505050505050565b60008151905061137681610b98565b92915050565b60006020828403121561139257611391610b8e565b5b60006113a084828501611367565b9150509291505056fea26469706673582212205edecd9108316bd9c6a7de820161fba8a3502d8962349cce6cdaf240ce407ce864736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c80636e04ff0d116100645780636e04ff0d146101745780638e7ea5b2146101b257806391ad27b4146101dd57806393e84cd914610208578063e55ae4e814610212578063f43b52cb1461024f5761009c565b80630e80d4da146100a15780631fe543e3146100cc578063283d314a146100f55780634585e33b146101205780636b68c03c14610149575b600080fd5b3480156100ad57600080fd5b506100b661027a565b6040516100c39190610b69565b60405180910390f35b3480156100d857600080fd5b506100f360048036038101906100ee9190610d1d565b6102a2565b005b34801561010157600080fd5b5061010a610362565b6040516101179190610b69565b60405180910390f35b34801561012c57600080fd5b5061014760048036038101906101429190610dd4565b610386565b005b34801561015557600080fd5b5061015e61040a565b60405161016b9190610e98565b60405180910390f35b34801561018057600080fd5b5061019b60048036038101906101969190610f68565b610421565b6040516101a992919061104b565b60405180910390f35b3480156101be57600080fd5b506101c76104bb565b6040516101d491906110bc565b60405180910390f35b3480156101e957600080fd5b506101f26104e5565b6040516101ff9190610b69565b60405180910390f35b610210610511565b005b34801561021e57600080fd5b50610239600480360381019061023491906110d7565b610680565b60405161024691906110bc565b60405180910390f35b34801561025b57600080fd5b506102646106c7565b6040516102719190610b69565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161034b929190611104565b60405180910390fd5b61035e82826106d1565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006103a060405180602001604052806000815250610421565b509050806103fd5747600080549050600160149054906101000a900460ff166040517f8c4c25f10000000000000000000000000000000000000000000000000000000081526004016103f49392919061112d565b60405180910390fd5b6104056108e3565b505050565b6000600160149054906101000a900460ff16905090565b60006060600160149054906101000a900460ff16600181111561044757610446610e21565b5b6000600181111561045b5761045a610e21565b5b14801561049857507f000000000000000000000000000000000000000000000000000000000000000061ffff16600254426104969190611193565b115b80156104a8575060008080549050115b80156104b45750600047115b9150915091565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000061ffff16905090565b6000600181111561052557610524610e21565b5b600160149054906101000a900460ff16600181111561054757610546610e21565b5b1461057e576040517fe76be6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003410156105d8576040517f6844f56200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b6000808281548110610695576106946111c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050826000815181106106ec576106eb6111c7565b5b60200260200101516106fe9190611225565b8154811061070f5761070e6111c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16476040516107c290611287565b60006040518083038185875af1925050503d80600081146107ff576040519150601f19603f3d011682016040523d82523d6000602084013e610804565b606091505b505090508061083f576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610847610a47565b426002819055506000600160146101000a81548160ff0219169083600181111561087457610873610e21565b5b0217905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a2505050565b60018060146101000a81548160ff0219169083600181111561090857610907610e21565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016109d2959493929190611314565b6020604051808303816000875af11580156109f1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a15919061137c565b9050807fb67476d1d38e93caac2ca37113122e613c199269c4cea0d39c67807a6442b40a60405160405180910390a250565b600067ffffffffffffffff811115610a6257610a61610bda565b5b604051908082528060200260200182016040528015610a905781602001602082028036833780820191505090505b5060009080519060200190610aa6929190610aa9565b50565b828054828255906000526020600020908101928215610b22579160200282015b82811115610b215782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ac9565b5b509050610b2f9190610b33565b5090565b5b80821115610b4c576000816000905550600101610b34565b5090565b6000819050919050565b610b6381610b50565b82525050565b6000602082019050610b7e6000830184610b5a565b92915050565b6000604051905090565b600080fd5b600080fd5b610ba181610b50565b8114610bac57600080fd5b50565b600081359050610bbe81610b98565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c1282610bc9565b810181811067ffffffffffffffff82111715610c3157610c30610bda565b5b80604052505050565b6000610c44610b84565b9050610c508282610c09565b919050565b600067ffffffffffffffff821115610c7057610c6f610bda565b5b602082029050602081019050919050565b600080fd5b6000610c99610c9484610c55565b610c3a565b90508083825260208201905060208402830185811115610cbc57610cbb610c81565b5b835b81811015610ce55780610cd18882610baf565b845260208401935050602081019050610cbe565b5050509392505050565b600082601f830112610d0457610d03610bc4565b5b8135610d14848260208601610c86565b91505092915050565b60008060408385031215610d3457610d33610b8e565b5b6000610d4285828601610baf565b925050602083013567ffffffffffffffff811115610d6357610d62610b93565b5b610d6f85828601610cef565b9150509250929050565b600080fd5b60008083601f840112610d9457610d93610bc4565b5b8235905067ffffffffffffffff811115610db157610db0610d79565b5b602083019150836001820283011115610dcd57610dcc610c81565b5b9250929050565b60008060208385031215610deb57610dea610b8e565b5b600083013567ffffffffffffffff811115610e0957610e08610b93565b5b610e1585828601610d7e565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e6157610e60610e21565b5b50565b6000819050610e7282610e50565b919050565b6000610e8282610e64565b9050919050565b610e9281610e77565b82525050565b6000602082019050610ead6000830184610e89565b92915050565b600080fd5b600067ffffffffffffffff821115610ed357610ed2610bda565b5b610edc82610bc9565b9050602081019050919050565b82818337600083830152505050565b6000610f0b610f0684610eb8565b610c3a565b905082815260208101848484011115610f2757610f26610eb3565b5b610f32848285610ee9565b509392505050565b600082601f830112610f4f57610f4e610bc4565b5b8135610f5f848260208601610ef8565b91505092915050565b600060208284031215610f7e57610f7d610b8e565b5b600082013567ffffffffffffffff811115610f9c57610f9b610b93565b5b610fa884828501610f3a565b91505092915050565b60008115159050919050565b610fc681610fb1565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611006578082015181840152602081019050610feb565b60008484015250505050565b600061101d82610fcc565b6110278185610fd7565b9350611037818560208601610fe8565b61104081610bc9565b840191505092915050565b60006040820190506110606000830185610fbd565b81810360208301526110728184611012565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110a68261107b565b9050919050565b6110b68161109b565b82525050565b60006020820190506110d160008301846110ad565b92915050565b6000602082840312156110ed576110ec610b8e565b5b60006110fb84828501610baf565b91505092915050565b600060408201905061111960008301856110ad565b61112660208301846110ad565b9392505050565b60006060820190506111426000830186610b5a565b61114f6020830185610b5a565b61115c6040830184610e89565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061119e82610b50565b91506111a983610b50565b92508282039050818111156111c1576111c0611164565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061123082610b50565b915061123b83610b50565b92508261124b5761124a6111f6565b5b828206905092915050565b600081905092915050565b50565b6000611271600083611256565b915061127c82611261565b600082019050919050565b600061129282611264565b9150819050919050565b6000819050919050565b6112af8161129c565b82525050565b600067ffffffffffffffff82169050919050565b6112d2816112b5565b82525050565b600061ffff82169050919050565b6112ef816112d8565b82525050565b600063ffffffff82169050919050565b61130e816112f5565b82525050565b600060a08201905061132960008301886112a6565b61133660208301876112c9565b61134360408301866112e6565b6113506060830185611305565b61135d6080830184611305565b9695505050505050565b60008151905061137681610b98565b92915050565b60006020828403121561139257611391610b8e565b5b60006113a084828501611367565b9150509291505056fea26469706673582212205edecd9108316bd9c6a7de820161fba8a3502d8962349cce6cdaf240ce407ce864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 871,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 873,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lastWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 878,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "state",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)847"
      },
      {
        "astId": 895,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "previousTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)847": {
        "encoding": "inplace",
        "label": "enum LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}